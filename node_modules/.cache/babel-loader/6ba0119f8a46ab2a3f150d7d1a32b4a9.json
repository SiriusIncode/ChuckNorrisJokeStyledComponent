{"ast":null,"code":"import _defineProperty from \"/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _extraReducers;\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport loadComments from '../services/comentService';\nimport statuses from \"../statuses\";\nimport { toast } from \"react-toastify\";\nimport generateRandomColor from \"../helpers\";\nexport var getComments = createAsyncThunk('comments/getComments', function () {\n  return loadComments();\n});\nexport var comentsReducer = createSlice({\n  name: \"comments\",\n  initialState: {\n    value: [],\n    status: statuses.loading,\n    error: null\n  },\n  reducers: {\n    addComment: function addComment(state, action) {\n      var sendComment = function sendComment() {\n        var copyComments = _toConsumableArray(comments);\n\n        copyComments.unshift({\n          time: new Date().toString(),\n          body: comment,\n          icoColor: generateRandomColor(),\n          name: name,\n          id: nanoid()\n        });\n        dispatch(setComments(copyComments));\n        dispatch(setName(\"\"));\n        dispatch(setComment(\"\"));\n      };\n\n      state.value = action.payload;\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, getComments.pending, function (state) {\n    state.status = statuses.loading;\n  }), _defineProperty(_extraReducers, getComments.fulfilled, function (state, action) {\n    state.value = action.payload.map(function (comment) {\n      return _objectSpread(_objectSpread({}, comment), {}, {\n        icoColor: generateRandomColor()\n      });\n    });\n    state.status = statuses.success;\n  }), _defineProperty(_extraReducers, getComments.rejected, function (state, action) {\n    state.status = statuses.failed;\n    state.error = action.error.message;\n    toast.error(\"Comments loading failed: \".concat(action.error.message));\n  }), _extraReducers)\n});\nvar addComment = comentsReducer.actions.addComment;\nexport { addComment };\nexport default comentsReducer.reducer;","map":{"version":3,"sources":["/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/src/reducers/commentsReducer.js"],"names":["createSlice","createAsyncThunk","loadComments","statuses","toast","generateRandomColor","getComments","comentsReducer","name","initialState","value","status","loading","error","reducers","addComment","state","action","sendComment","copyComments","comments","unshift","time","Date","toString","body","comment","icoColor","id","nanoid","dispatch","setComments","setName","setComment","payload","extraReducers","pending","fulfilled","map","success","rejected","failed","message","actions","reducer"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,mBAAP,MAAgC,YAAhC;AAEA,OAAO,IAAMC,WAAW,GAAGL,gBAAgB,CAAC,sBAAD,EAAyB,YAAM;AACxE,SAAOC,YAAY,EAAnB;AACD,CAF0C,CAApC;AAIP,OAAO,IAAMK,cAAc,GAAGP,WAAW,CAAC;AACxCQ,EAAAA,IAAI,EAAE,UADkC;AAExCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,MAAM,EAAER,QAAQ,CAACS,OAFL;AAGZC,IAAAA,KAAK,EAAE;AAHK,GAF0B;AAOxCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,oBAACC,KAAD,EAAQC,MAAR,EAAmB;AAC7B,UAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,YAAMC,YAAY,sBAAOC,QAAP,CAAlB;;AACAD,QAAAA,YAAY,CAACE,OAAb,CAAqB;AACnBC,UAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,QAAX,EADa;AAEnBC,UAAAA,IAAI,EAAEC,OAFa;AAGnBC,UAAAA,QAAQ,EAAEtB,mBAAmB,EAHV;AAInBG,UAAAA,IAAI,EAAJA,IAJmB;AAKnBoB,UAAAA,EAAE,EAAEC,MAAM;AALS,SAArB;AAQAC,QAAAA,QAAQ,CAACC,WAAW,CAACZ,YAAD,CAAZ,CAAR;AACAW,QAAAA,QAAQ,CAACE,OAAO,CAAC,EAAD,CAAR,CAAR;AACAF,QAAAA,QAAQ,CAACG,UAAU,CAAC,EAAD,CAAX,CAAR;AACD,OAbD;;AAcAjB,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACiB,OAArB;AACD;AAjBO,GAP8B;AA0BxCC,EAAAA,aAAa,wDACV7B,WAAW,CAAC8B,OADF,EACY,UAAApB,KAAK,EAAI;AAC9BA,IAAAA,KAAK,CAACL,MAAN,GAAeR,QAAQ,CAACS,OAAxB;AACD,GAHU,mCAIVN,WAAW,CAAC+B,SAJF,EAIc,UAACrB,KAAD,EAAQC,MAAR,EAAmB;AAC1CD,IAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACiB,OAAP,CAAeI,GAAf,CAAmB,UAACZ,OAAD;AAAA,6CAC5BA,OAD4B;AAE/BC,QAAAA,QAAQ,EAAEtB,mBAAmB;AAFE;AAAA,KAAnB,CAAd;AAIAW,IAAAA,KAAK,CAACL,MAAN,GAAeR,QAAQ,CAACoC,OAAxB;AACD,GAVU,mCAWVjC,WAAW,CAACkC,QAXF,EAWa,UAACxB,KAAD,EAAQC,MAAR,EAAmB;AACzCD,IAAAA,KAAK,CAACL,MAAN,GAAeR,QAAQ,CAACsC,MAAxB;AACAzB,IAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAAP,CAAa6B,OAA3B;AACAtC,IAAAA,KAAK,CAACS,KAAN,oCAAwCI,MAAM,CAACJ,KAAP,CAAa6B,OAArD;AACD,GAfU;AA1B2B,CAAD,CAAlC;AA6CA,IAAQ3B,UAAR,GAAuBR,cAAc,CAACoC,OAAtC,CAAQ5B,UAAR;;AACP,eAAeR,cAAc,CAACqC,OAA9B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport loadComments from '../services/comentService';\nimport statuses from \"../statuses\";\nimport { toast } from \"react-toastify\";\nimport generateRandomColor from \"../helpers\";\n\nexport const getComments = createAsyncThunk('comments/getComments', () => {\n  return loadComments();\n})\n\nexport const comentsReducer = createSlice({\n  name: \"comments\",\n  initialState: {\n    value: [],\n    status: statuses.loading, \n    error: null\n  },\n  reducers: {\n    addComment: (state, action) => {\n      const sendComment = () => {\n        const copyComments = [...comments];\n        copyComments.unshift({\n          time: new Date().toString(),\n          body: comment,\n          icoColor: generateRandomColor(),\n          name,\n          id: nanoid(),\n        });\n    \n        dispatch(setComments(copyComments));\n        dispatch(setName(\"\"));\n        dispatch(setComment(\"\"));\n      };\n      state.value = action.payload;\n    },\n  },\n  extraReducers: {\n    [getComments.pending]: state => {\n      state.status = statuses.loading;\n    },\n    [getComments.fulfilled]: (state, action) => {\n      state.value = action.payload.map((comment) => ({\n        ...comment,\n        icoColor: generateRandomColor(),\n      }));\n      state.status = statuses.success;\n    },\n    [getComments.rejected]: (state, action) => {\n      state.status = statuses.failed;\n      state.error = action.error.message; \n      toast.error(`Comments loading failed: ${action.error.message}`);\n    }\n  }\n});\n\nexport const { addComment } = comentsReducer.actions;\nexport default comentsReducer.reducer;\n"]},"metadata":{},"sourceType":"module"}