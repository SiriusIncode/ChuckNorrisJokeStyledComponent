{"ast":null,"code":"import _defineProperty from \"/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _extraReducers;\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport loadJoke from '../services/jokeService';\nexport var getJoke = createAsyncThunk('joke/getJoke', function () {\n  fetch(\"https://api.chucknorris.io/jokes/random/\").then(function (res) {\n    return res.json();\n  }).then(function (res) {\n    if (done) {\n      done(res);\n    }\n\n    ;\n    return res;\n  });\n});\nexport var jokeReducer = createSlice({\n  name: \"joke\",\n  initialState: {\n    value: {},\n    status: 'loading',\n    error: null\n  },\n  reducers: {\n    setJoke: function setJoke(state, action) {\n      state.value = action.payload;\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, getJoke.pending, function (state) {\n    state.status = 'loading';\n  }), _defineProperty(_extraReducers, getJoke.fulfilled, function (state, action) {\n    state.status = 'success';\n    console.log(action.payload);\n    state.value = action.payload;\n  }), _defineProperty(_extraReducers, getJoke.rejected, function (state, action) {\n    state.status = 'failed';\n    state.error = action.error.message;\n  }), _extraReducers)\n});\nvar setJoke = jokeReducer.actions.setJoke;\nexport { setJoke };\nexport default jokeReducer.reducer;","map":{"version":3,"sources":["/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/src/reducers/jokeReducer.js"],"names":["createSlice","createAsyncThunk","loadJoke","getJoke","fetch","then","res","json","done","jokeReducer","name","initialState","value","status","error","reducers","setJoke","state","action","payload","extraReducers","pending","fulfilled","console","log","rejected","message","actions","reducer"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAGA,OAAO,IAAMC,OAAO,GAAGF,gBAAgB,CAAC,cAAD,EAAiB,YAAM;AAC5DG,EAAAA,KAAK,CAAC,0CAAD,CAAL,CACCC,IADD,CACM,UAACC,GAAD;AAAA,WAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,GADN,EAECF,IAFD,CAEM,UAACC,GAAD,EAAS;AACb,QAAGE,IAAH,EAAQ;AACNA,MAAAA,IAAI,CAACF,GAAD,CAAJ;AACD;;AAAA;AACD,WAAOA,GAAP;AACD,GAPD;AAQD,CATsC,CAAhC;AAWP,OAAO,IAAMG,WAAW,GAAGT,WAAW,CAAC;AACrCU,EAAAA,IAAI,EAAE,MAD+B;AAErCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,MAAM,EAAE,SAFI;AAGZC,IAAAA,KAAK,EAAE;AAHK,GAFuB;AAOrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,iBAACC,KAAD,EAAQC,MAAR,EAAmB;AAC1BD,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACD;AAHO,GAP2B;AAYrCC,EAAAA,aAAa,wDACVjB,OAAO,CAACkB,OADE,EACQ,UAACJ,KAAD,EAAW;AAC5BA,IAAAA,KAAK,CAACJ,MAAN,GAAe,SAAf;AACD,GAHU,mCAIVV,OAAO,CAACmB,SAJE,EAIU,UAACL,KAAD,EAAQC,MAAR,EAAmB;AACtCD,IAAAA,KAAK,CAACJ,MAAN,GAAe,SAAf;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACC,OAAnB;AACAF,IAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACD,GARU,mCASVhB,OAAO,CAACsB,QATE,EASS,UAACR,KAAD,EAAQC,MAAR,EAAmB;AACrCD,IAAAA,KAAK,CAACJ,MAAN,GAAe,QAAf;AACAI,IAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAAP,CAAaY,OAA3B;AACD,GAZU;AAZwB,CAAD,CAA/B;AA4BA,IAAQV,OAAR,GAAoBP,WAAW,CAACkB,OAAhC,CAAQX,OAAR;;AACP,eAAeP,WAAW,CAACmB,OAA3B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport loadJoke from '../services/jokeService';\n\n\nexport const getJoke = createAsyncThunk('joke/getJoke', () => {\n  fetch(\"https://api.chucknorris.io/jokes/random/\")\n  .then((res) => res.json())\n  .then((res) => {\n    if(done){\n      done(res) \n    };\n    return res;\n  });\n});\n\nexport const jokeReducer = createSlice({\n  name: \"joke\",\n  initialState: {\n    value: {},\n    status: 'loading', \n    error: null\n  },\n  reducers: {\n    setJoke: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n  extraReducers: {\n    [getJoke.pending]: (state) => {\n      state.status = 'loading';\n    },\n    [getJoke.fulfilled]: (state, action) => {\n      state.status = 'success';\n      console.log(action.payload)\n      state.value = action.payload;\n    },\n    [getJoke.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message; \n    } \n  }\n});\n\nexport const { setJoke } = jokeReducer.actions;\nexport default jokeReducer.reducer;\n"]},"metadata":{},"sourceType":"module"}