{"ast":null,"code":"import _defineProperty from \"/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _extraReducers;\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport loadComments from '../services/comentService';\nimport statuses from \"../statuses\";\nimport { toast } from \"react-toastify\";\nimport generateRandomColor from \"../helpers\";\nexport var getComments = createAsyncThunk('comments/getComments', function () {\n  return loadComments();\n});\nexport var comentsReducer = createSlice({\n  name: \"comments\",\n  initialState: {\n    value: [],\n    status: statuses.loading,\n    error: null\n  },\n  reducers: {\n    addComment: function addComment(state, action) {\n      state.value = action.payload;\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, getComments.pending, function (state) {\n    state.status = statuses.loading;\n  }), _defineProperty(_extraReducers, getComments.fulfilled, function (state, action) {\n    state.value = action.payload.map(function (comment) {\n      return _objectSpread(_objectSpread({}, comment), {}, {\n        icoColor: generateRandomColor()\n      });\n    });\n    state.status = statuses.success;\n  }), _defineProperty(_extraReducers, getComments.rejected, function (state, action) {\n    state.status = statuses.failed;\n    state.error = action.error.message;\n    toast.error(\"Comments loading failed: \".concat(action.error.message));\n  }), _extraReducers)\n});\nvar setComments = comentsReducer.actions.setComments;\nexport { setComments };\nexport default comentsReducer.reducer;","map":{"version":3,"sources":["/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/src/reducers/commentsReducer.js"],"names":["createSlice","createAsyncThunk","loadComments","statuses","toast","generateRandomColor","getComments","comentsReducer","name","initialState","value","status","loading","error","reducers","addComment","state","action","payload","extraReducers","pending","fulfilled","map","comment","icoColor","success","rejected","failed","message","setComments","actions","reducer"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,mBAAP,MAAgC,YAAhC;AAEA,OAAO,IAAMC,WAAW,GAAGL,gBAAgB,CAAC,sBAAD,EAAyB,YAAM;AACxE,SAAOC,YAAY,EAAnB;AACD,CAF0C,CAApC;AAIP,OAAO,IAAMK,cAAc,GAAGP,WAAW,CAAC;AACxCQ,EAAAA,IAAI,EAAE,UADkC;AAExCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,MAAM,EAAER,QAAQ,CAACS,OAFL;AAGZC,IAAAA,KAAK,EAAE;AAHK,GAF0B;AAOxCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,oBAACC,KAAD,EAAQC,MAAR,EAAmB;AAC7BD,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAArB;AACD;AAHO,GAP8B;AAYxCC,EAAAA,aAAa,wDACVb,WAAW,CAACc,OADF,EACY,UAAAJ,KAAK,EAAI;AAC9BA,IAAAA,KAAK,CAACL,MAAN,GAAeR,QAAQ,CAACS,OAAxB;AACD,GAHU,mCAIVN,WAAW,CAACe,SAJF,EAIc,UAACL,KAAD,EAAQC,MAAR,EAAmB;AAC1CD,IAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAAP,CAAeI,GAAf,CAAmB,UAACC,OAAD;AAAA,6CAC5BA,OAD4B;AAE/BC,QAAAA,QAAQ,EAAEnB,mBAAmB;AAFE;AAAA,KAAnB,CAAd;AAIAW,IAAAA,KAAK,CAACL,MAAN,GAAeR,QAAQ,CAACsB,OAAxB;AACD,GAVU,mCAWVnB,WAAW,CAACoB,QAXF,EAWa,UAACV,KAAD,EAAQC,MAAR,EAAmB;AACzCD,IAAAA,KAAK,CAACL,MAAN,GAAeR,QAAQ,CAACwB,MAAxB;AACAX,IAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAAP,CAAae,OAA3B;AACAxB,IAAAA,KAAK,CAACS,KAAN,oCAAwCI,MAAM,CAACJ,KAAP,CAAae,OAArD;AACD,GAfU;AAZ2B,CAAD,CAAlC;AA+BA,IAAQC,WAAR,GAAwBtB,cAAc,CAACuB,OAAvC,CAAQD,WAAR;;AACP,eAAetB,cAAc,CAACwB,OAA9B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport loadComments from '../services/comentService';\nimport statuses from \"../statuses\";\nimport { toast } from \"react-toastify\";\nimport generateRandomColor from \"../helpers\";\n\nexport const getComments = createAsyncThunk('comments/getComments', () => {\n  return loadComments();\n})\n\nexport const comentsReducer = createSlice({\n  name: \"comments\",\n  initialState: {\n    value: [],\n    status: statuses.loading, \n    error: null\n  },\n  reducers: {\n    addComment: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n  extraReducers: {\n    [getComments.pending]: state => {\n      state.status = statuses.loading;\n    },\n    [getComments.fulfilled]: (state, action) => {\n      state.value = action.payload.map((comment) => ({\n        ...comment,\n        icoColor: generateRandomColor(),\n      }));\n      state.status = statuses.success;\n    },\n    [getComments.rejected]: (state, action) => {\n      state.status = statuses.failed;\n      state.error = action.error.message; \n      toast.error(`Comments loading failed: ${action.error.message}`);\n    }\n  }\n});\n\nexport const { setComments } = comentsReducer.actions;\nexport default comentsReducer.reducer;\n"]},"metadata":{},"sourceType":"module"}