{"ast":null,"code":"import _defineProperty from \"/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _extraReducers;\n\nimport { createSlice, createAsyncThunk, nanoid } from \"@reduxjs/toolkit\";\nimport loadComments from \"../services/comentService\";\nimport statuses from \"../statuses\";\nimport { toast } from \"react-toastify\";\nimport generateRandomColor from \"../helpers\";\nexport var getComments = createAsyncThunk(\"comments/getComments\", function () {\n  return loadComments();\n});\nexport var comentsReducer = createSlice({\n  name: \"comments\",\n  initialState: {\n    value: [],\n    status: statuses.loading,\n    error: null\n  },\n  reducers: {\n    addComment: function addComment(state, action) {\n      var _action$payload = action.payload,\n          time = _action$payload.time,\n          comment = _action$payload.comment,\n          name = _action$payload.name;\n      state.value.unshift({\n        time: time,\n        body: comment,\n        icoColor: generateRandomColor(),\n        name: name,\n        id: nanoid()\n      });\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, getComments.pending, function (state) {\n    state.status = statuses.loading;\n  }), _defineProperty(_extraReducers, getComments.fulfilled, function (state, action) {\n    state.value = action.payload.map(function (comment) {\n      return _objectSpread(_objectSpread({}, comment), {}, {\n        icoColor: generateRandomColor()\n      });\n    });\n    state.status = statuses.succeeded;\n  }), _defineProperty(_extraReducers, getComments.rejected, function (state, action) {\n    state.status = statuses.failed;\n    state.error = action.error.message;\n    toast.error(\"Comments loading failed: \".concat(action.error.message));\n  }), _extraReducers)\n});\nvar addComment = comentsReducer.actions.addComment;\nexport { addComment };\nexport default comentsReducer.reducer;","map":{"version":3,"sources":["/home/sirius/Desktop/projects/ChuckNorrisJokeStyledComponent/src/reducers/commentsReducer.js"],"names":["createSlice","createAsyncThunk","nanoid","loadComments","statuses","toast","generateRandomColor","getComments","comentsReducer","name","initialState","value","status","loading","error","reducers","addComment","state","action","payload","time","comment","unshift","body","icoColor","id","extraReducers","pending","fulfilled","map","succeeded","rejected","failed","message","actions","reducer"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,MAAxC,QAAsD,kBAAtD;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,mBAAP,MAAgC,YAAhC;AAEA,OAAO,IAAMC,WAAW,GAAGN,gBAAgB,CAAC,sBAAD,EAAyB,YAAM;AACxE,SAAOE,YAAY,EAAnB;AACD,CAF0C,CAApC;AAIP,OAAO,IAAMK,cAAc,GAAGR,WAAW,CAAC;AACxCS,EAAAA,IAAI,EAAE,UADkC;AAExCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,MAAM,EAAER,QAAQ,CAACS,OAFL;AAGZC,IAAAA,KAAK,EAAE;AAHK,GAF0B;AAOxCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,oBAACC,KAAD,EAAQC,MAAR,EAAmB;AAC7B,4BAAgCA,MAAM,CAACC,OAAvC;AAAA,UAAQC,IAAR,mBAAQA,IAAR;AAAA,UAAcC,OAAd,mBAAcA,OAAd;AAAA,UAAuBZ,IAAvB,mBAAuBA,IAAvB;AACAQ,MAAAA,KAAK,CAACN,KAAN,CAAYW,OAAZ,CAAoB;AAClBF,QAAAA,IAAI,EAAJA,IADkB;AAElBG,QAAAA,IAAI,EAAEF,OAFY;AAGlBG,QAAAA,QAAQ,EAAElB,mBAAmB,EAHX;AAIlBG,QAAAA,IAAI,EAAJA,IAJkB;AAKlBgB,QAAAA,EAAE,EAAEvB,MAAM;AALQ,OAApB;AAOD;AAVO,GAP8B;AAmBxCwB,EAAAA,aAAa,wDACVnB,WAAW,CAACoB,OADF,EACY,UAACV,KAAD,EAAW;AAChCA,IAAAA,KAAK,CAACL,MAAN,GAAeR,QAAQ,CAACS,OAAxB;AACD,GAHU,mCAIVN,WAAW,CAACqB,SAJF,EAIc,UAACX,KAAD,EAAQC,MAAR,EAAmB;AAC1CD,IAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAAP,CAAeU,GAAf,CAAmB,UAACR,OAAD;AAAA,6CAC5BA,OAD4B;AAE/BG,QAAAA,QAAQ,EAAElB,mBAAmB;AAFE;AAAA,KAAnB,CAAd;AAIAW,IAAAA,KAAK,CAACL,MAAN,GAAeR,QAAQ,CAAC0B,SAAxB;AACD,GAVU,mCAWVvB,WAAW,CAACwB,QAXF,EAWa,UAACd,KAAD,EAAQC,MAAR,EAAmB;AACzCD,IAAAA,KAAK,CAACL,MAAN,GAAeR,QAAQ,CAAC4B,MAAxB;AACAf,IAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAAP,CAAamB,OAA3B;AACA5B,IAAAA,KAAK,CAACS,KAAN,oCAAwCI,MAAM,CAACJ,KAAP,CAAamB,OAArD;AACD,GAfU;AAnB2B,CAAD,CAAlC;AAsCA,IAAQjB,UAAR,GAAuBR,cAAc,CAAC0B,OAAtC,CAAQlB,UAAR;;AACP,eAAeR,cAAc,CAAC2B,OAA9B","sourcesContent":["import { createSlice, createAsyncThunk, nanoid } from \"@reduxjs/toolkit\";\nimport loadComments from \"../services/comentService\";\nimport statuses from \"../statuses\";\nimport { toast } from \"react-toastify\";\nimport generateRandomColor from \"../helpers\";\n\nexport const getComments = createAsyncThunk(\"comments/getComments\", () => {\n  return loadComments();\n});\n\nexport const comentsReducer = createSlice({\n  name: \"comments\",\n  initialState: {\n    value: [],\n    status: statuses.loading,\n    error: null,\n  },\n  reducers: {\n    addComment: (state, action) => {\n      const { time, comment, name } = action.payload;\n      state.value.unshift({\n        time,\n        body: comment,\n        icoColor: generateRandomColor(),\n        name,\n        id: nanoid(),\n      });\n    },\n  },\n  extraReducers: {\n    [getComments.pending]: (state) => {\n      state.status = statuses.loading;\n    },\n    [getComments.fulfilled]: (state, action) => {\n      state.value = action.payload.map((comment) => ({\n        ...comment,\n        icoColor: generateRandomColor(),\n      }));\n      state.status = statuses.succeeded;\n    },\n    [getComments.rejected]: (state, action) => {\n      state.status = statuses.failed;\n      state.error = action.error.message;\n      toast.error(`Comments loading failed: ${action.error.message}`);\n    },\n  },\n});\n\nexport const { addComment } = comentsReducer.actions;\nexport default comentsReducer.reducer;\n"]},"metadata":{},"sourceType":"module"}